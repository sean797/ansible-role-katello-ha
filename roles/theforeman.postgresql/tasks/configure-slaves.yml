# file: tasks/configure-slaves.yml -- postgresql pre-start configuration of the slave servers and startup

- name: "Check cluster directory exists"
  stat: path={{ postgresql_data_dir }}
  register: postgresql_data_stat

- name: "Check cluster directory is empty"
  find:
    paths: "{{ postgresql_data_dir }}"
  register: postgresql_data_find

- name: "Write .pgpass for postgres user"
  become: true
  become_user: "{{ postgresql_admin_user }}"
  copy:
    content: "*:*:*:{{ postgresql_replication_user.name  }}:{{ postgresql_replication_user.pass }}\n"
    dest: ~/.pgpass
    owner: "{{ postgresql_admin_user }}"
    group: "{{ postgresql_admin_user }}"
    mode: 0600

- name: "Initialize new postgresql cluster"
  become: true
  become_user: "{{ postgresql_admin_user }}"
  command: "{{ postgresql_exec_dir }}/pg_basebackup -w -c fast -X stream -h {{ groups['postgresql-master'][0] }} -U {{ postgresql_replication_user.name }} -D {{ postgresql_data_dir }}"
  when: postgresql_data_stat.stat.exists == False or postgresql_data_find.matched|int == 0

- name: "Configure pg_hba.conf"
  template:
    src: pg_hba.conf.j2
    dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
    owner: "{{ postgresql_admin_user }}"
    group: "{{ postgresql_admin_user }}"
    mode: 0600

- name: "Configure postgresql.conf"
  lineinfile:
    dest: "{{ postgresql_conf_dir }}/postgresql.conf"
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.guc }}"
  with_items: "{{ postgresql_conf_default_guc }}"

- name: "Configure recovery.conf"
  template:
    src: recovery.conf.j2
    dest: "{{ postgresql_conf_dir }}/recovery.conf"
    owner: "{{ postgresql_admin_user }}"
    group: "{{ postgresql_admin_user }}"
    mode: 0600

- name: "Start postgresql service"
  service: 
    name: "{{postgresql_service_name }}"
    state: started
    enabled: yes
